@use './map' as *;
@use './variable' as *;
@use './mixin' as *;

// colors 
@each $color-key,
$color-value in $colors {
    .text-#{$color-key} {
        color: $color-value;
    }

    .bg-#{$color-key} {
        color: $color-value;
    }
}

@each $breakpoint,
$val in $breakpoints {
    @include mq($breakpoint) {
        @for $width from 1 through $grid-columns {
            @if ($breakpoint ==xs) {

                .grid-#{$width} {
                    display: grid;
                    grid-template-columns: repeat($width, 1fr);
                }

                .col-#{$width} {
                    grid-column-start: $width span;
                }
            }

            @else {

                .grid-#{$breakpoint}-#{$width} {
                    display: grid;
                    grid-template-columns: repeat($width, 1fr);
                }

                .col-#{$breakpoint}-#{$width} {
                    grid-column-start: $width span;
                }
            }
        }
    }

}

@each $breakpoint,
$val in $breakpoints {
    @include mq($breakpoint) {


        @for $space from 0 through 5 {
            @if ($breakpoint ==xs) {

                .gap-#{$space} {

                    gap:calc(#{$space} * var(--base-space))
                }
            }

            @else {
                .gap-#{$breakpoint}-#{$space} {

                    gap:calc(#{$space} * var(--base-space))
                }

            }
        }
    }
}

@each $breakpoint,
$val in $breakpoints {
    @include mq($breakpoint) {


        @for $space from 0 through 5 {
            @if ($breakpoint ==xs) {

                .margin-#{$space} {

                    gap:calc(#{$space} * var(--base-space))
                }
            }

            @else {
                .gap-#{$breakpoint}-#{$space} {

                    gap:calc(#{$space} * var(--base-space))
                }

            }
        }
    }
}
